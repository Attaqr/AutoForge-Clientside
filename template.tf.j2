provider "aws" {
  region = "eu-west-2"
  shared_credentials_files = ["$HOME/.aws/credentials"]
  profile = "default"
}

resource "aws_subnet" "ec2_subnet" {
  vpc_id            = "vpc-0000000000000000"
  cidr_block        = "{{ subnet_cidr }}" 
  availability_zone = "eu-west-2a"

  tags = {
    Name = "{{ subnet_name_tag }}"
  }
}

resource "aws_subnet" "ec2_subnet2" {
 vpc_id           = "vpc-0000000000000000"
 cidr_block       = "{{ subnet_alb_cidr }}"
 availability_zone = "eu-west-2b"

 tags = {
   Name = "{{ subnet_alb_tag }}"
 }
}

resource "aws_route_table_association" "subnet_association_1" {
  subnet_id      = aws_subnet.ec2_subnet.id 
  route_table_id = "rtb-0000000000000000"
}

resource "aws_route_table_association" "subnet_association_2" {
  subnet_id      = aws_subnet.ec2_subnet.id 
  route_table_id = "rtb-0000000000000000"
}

resource "aws_security_group" "ec2_security_group" {
  vpc_id = "vpc-0000000000000000" 

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] 
  }
      ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] 
  }
  ingress {
    from_port   = 6080
    to_port     = 6080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] 
  }
}

data "aws_ami" "latest_ubuntu" {
  most_recent = true

  owners = ["000000000000"]  

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-*-20.04-amd64-server-*"]
  }
}

resource "null_resource" "generate_ssh_key_pair" {
  provisioner "local-exec" {
    command = "ssh-keygen -t rsa -b 4096 -f ./{{ ec2_key }} -N ''"
  }

  triggers = {
    always_run = "${timestamp()}"
  }
}

data "local_file" "public_key" {
  depends_on = [null_resource.generate_ssh_key_pair]
  filename   = "./{{ ec2_pub }}"
}

resource "aws_key_pair" "ec2_key_pair" {
  key_name   = "{{ ec2_key }}"  
  public_key = data.local_file.public_key.content
}

resource "aws_iam_instance_profile" "ec2_rds_instance_profile" {
  name = "ec2_rds_instance_profile"
  role = "EC2_rds_role" 
}


resource "aws_instance" "ec2_instance" {
  ami           = data.aws_ami.latest_ubuntu.id
  instance_type = "t2.medium"                
  key_name      = aws_key_pair.ec2_key_pair.key_name     
  associate_public_ip_address = true
  subnet_id = aws_subnet.ec2_subnet.id
  iam_instance_profile = aws_iam_instance_profile.ec2_rds_instance_profile.name

  vpc_security_group_ids = [aws_security_group.ec2_security_group.id, "sg-00000000000000000"]

  tags = {
    Name = "{{ ec2_name }}"
  }
}

resource "aws_lb_target_group" "my_app" {
 name    = "{{ target_group }}"
 port    = 6080
 protocol = "HTTP"
 vpc_id  = "vpc-0000000000000000"
 target_type = "ip"
}

resource "aws_lb" "my_app" {
 name              = "{{ lb_name }}"
 internal          = false
 load_balancer_type = "application"
 security_groups   = [aws_security_group.ec2_security_group.id]
 subnets           = [aws_subnet.ec2_subnet.id , aws_subnet.ec2_subnet2.id]

 enable_deletion_protection = false

 tags = {
   Environment = "test"
 }
}

resource "aws_lb_listener" "front_end" {
 load_balancer_arn = aws_lb.my_app.arn
 port             = "80"
 protocol         = "HTTP"
 
 default_action {
   type            = "forward"
   target_group_arn = aws_lb_target_group.my_app.arn
 }
}

resource "aws_lb_listener" "https" {
 load_balancer_arn = aws_lb.my_app.arn
 port             = "443"
 protocol         = "HTTPS"
 ssl_policy       = "ELBSecurityPolicy-2016-08"
 certificate_arn = "arn:aws:acm:eu-west-2:000000000000:certificate/000000000000000000000"


 default_action {
   type            = "forward"
   target_group_arn = aws_lb_target_group.my_app.arn
 }
}
resource "aws_lb_listener" "httpsvnc" {
 load_balancer_arn = aws_lb.my_app.arn
 port             = "6080"
 protocol         = "HTTPS"
 ssl_policy       = "ELBSecurityPolicy-2016-08"
 certificate_arn = "arn:aws:acm:eu-west-2:000000000000:certificate/000000000000000000000"


 default_action {
   type            = "forward"
   target_group_arn = aws_lb_target_group.my_app.arn
 }
}

resource "aws_lb_target_group_attachment" "my_app" {
 target_group_arn = aws_lb_target_group.my_app.arn
 target_id      = aws_instance.ec2_instance.private_ip
}

resource "random_pet" "subdomain" {}

output "lb_dns_name" {
 value = aws_lb.my_app.dns_name
 description = "The DNS name of the load balancer."
}

resource "aws_route53_health_check" "ec2_health_check" {
  depends_on = [aws_instance.ec2_instance]
  ip_address = aws_instance.ec2_instance.public_ip
  port = 6080
  type = "TCP"
  failure_threshold = 1
  request_interval = 10

  tags = {
    Name = "{{ ec2_name }}_health_check"
  }
}

resource "aws_route53_record" "ec2_record" {
  zone_id = "000000000000000000000"
  depends_on = [aws_instance.ec2_instance]
  name = "${random_pet.subdomain.id}"
  type = "A"
  set_identifier = "Primary"
  alias {
    name = aws_lb.my_app.dns_name
    zone_id = aws_lb.my_app.zone_id
    evaluate_target_health = false
  }
  failover_routing_policy {
    type = "PRIMARY"
  }
  health_check_id = aws_route53_health_check.ec2_health_check.id
}

resource "aws_route53_record" "ec2_record2" {
  depends_on = [aws_instance.ec2_instance]
  zone_id = "000000000000000000000"
  name = aws_route53_record.ec2_record.name
  type = "A"
  set_identifier = "Secondary"
  alias {
    name = "failover-910037714.eu-west-2.elb.amazonaws.com"
    zone_id = "00000000000000"
    evaluate_target_health = false
  }
  failover_routing_policy {
    type = "SECONDARY"
  }
  health_check_id = "0000000000000000000000"
}

output "aws_route53_record" {
 value = aws_route53_record.ec2_record.name
 description = "The DNS name of the load balancer."
}

output "instance_id" {
 value = aws_instance.ec2_instance.id
 description = "The ID of the EC2 instance"
}

output "instance_public_ip" {
 value = aws_instance.ec2_instance.public_ip
 description = "The public IP of the EC2 instance"
}
